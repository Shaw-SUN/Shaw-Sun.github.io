(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{324:function(v,_,t){"use strict";t.r(_);var e=t(10),r=Object(e.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"其他笔记"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#其他笔记"}},[v._v("#")]),v._v(" 其他笔记")]),v._v(" "),_("h2",{attrs:{id:"语义化版本号管理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#语义化版本号管理"}},[v._v("#")]),v._v(" 语义化版本号管理")]),v._v(" "),_("p",[v._v("Node 项目遵循 "),_("a",{attrs:{href:"https://semver.org/lang/zh-CN/",target:"_blank",rel:"noopener noreferrer"}},[v._v("语义化版本号 open in new window"),_("OutboundLink")],1),v._v(" 的规则，例如 "),_("code",[v._v("1.0.0")]),v._v(" 、 "),_("code",[v._v("1.0.1")]),v._v(" 、 "),_("code",[v._v("1.1.0")]),v._v(" 这样的版本号，本教材的主角 Vue 也是遵循了语义化版本号的发布规则。")]),v._v(" "),_("p",[v._v("建议开发者在入门前端工程化的时候就应该熟悉这套规则，后续的项目开发中，你会使用到很多外部依赖，它们也是使用版本号控制来管理代码的发布，每个版本之间可能会有一些兼容性问题，如果不了解版本号的通用规则，很容易在你的开发中带来困扰。")]),v._v(" "),_("p",[v._v("TIP")]),v._v(" "),_("p",[v._v("现在有很多 CI/CD 流水线作业具备了根据 Git 的 Commit 记录来自动升级版本号，它们也是遵循了语义化版本号规则，版本号的语义化在前端工程里有重大的意义。")]),v._v(" "),_("h3",{attrs:{id:"基本格式与升级规则"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#基本格式与升级规则"}},[v._v("#")]),v._v(" 基本格式与升级规则")]),v._v(" "),_("p",[v._v("版本号的格式为： "),_("code",[v._v("Major.Minor.Patch")]),v._v(" （简称 "),_("code",[v._v("X.Y.Z")]),v._v(" ），它们的含义和升级规则如下：")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("英文")]),v._v(" "),_("th",[v._v("中文")]),v._v(" "),_("th",[v._v("含义")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("Major")]),v._v(" "),_("td",[v._v("主版本号")]),v._v(" "),_("td",[v._v("当项目作了大量的变更，与旧版本存在一定的不兼容问题")])]),v._v(" "),_("tr",[_("td",[v._v("Minor")]),v._v(" "),_("td",[v._v("次版本号")]),v._v(" "),_("td",[v._v("做了向下兼容的功能改动或者少量功能更新")])]),v._v(" "),_("tr",[_("td",[v._v("Patch")]),v._v(" "),_("td",[v._v("修订号")]),v._v(" "),_("td",[v._v("修复上一个版本的少量 BUG")])])])]),v._v(" "),_("p",[v._v("一般情况下，三者均为正整数，并且从 "),_("code",[v._v("0")]),v._v(" 开始，遵循这三条注意事项：")]),v._v(" "),_("ul",[_("li",[v._v("当主版本号升级时，次版本号和修订号归零")]),v._v(" "),_("li",[v._v("当次版本号升级时，修订号归零，主版本号保持不变")]),v._v(" "),_("li",[v._v("当修订号升级时，主版本号和次版本号保持不变")])]),v._v(" "),_("p",[v._v("下面以一些常见的例子帮助你快速理解版本号的升级规则：")]),v._v(" "),_("ul",[_("li",[v._v("如果不打算发布，可以默认为 "),_("code",[v._v("0.0.0")]),v._v(" ，代表它并不是一个进入发布状态的包")]),v._v(" "),_("li",[v._v("在正式发布之前，你可以将其设置为 "),_("code",[v._v("0.1.0")]),v._v(" 发布第一个测试版本，自此，代表已进入发布状态，但还处于初期开发阶段，这个阶段你可能经常改变 API ，但不需要频繁的更新主版本号")]),v._v(" "),_("li",[v._v("在 "),_("code",[v._v("0.1.0")]),v._v(" 发布后，修复了 BUG ，下一个版本号将设置为 "),_("code",[v._v("0.1.1")]),v._v(" ，即更新了一个修订号")]),v._v(" "),_("li",[v._v("在 "),_("code",[v._v("0.1.1")]),v._v(" 发布后，有新的功能发布，下一个版本号可以升级为 "),_("code",[v._v("0.2.0")]),v._v(" ，即更新了一个次版本号")]),v._v(" "),_("li",[v._v("当你觉得这个项目已经功能稳定、没有什么 BUG 了，决定正式发布并给用户使用时，那么就可以进入了 "),_("code",[v._v("1.0.0")]),v._v(" 正式版了")])]),v._v(" "),_("h3",{attrs:{id:"版本标识符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#版本标识符"}},[v._v("#")]),v._v(" 版本标识符")]),v._v(" "),_("p",[v._v("以上是一些常规的版本号升级规则，你也可以通过添加 “标识符” 来修饰你的版本更新：")]),v._v(" "),_("p",[v._v("格式为： "),_("code",[v._v("Major.Minor.Patch-Identifier.1")]),v._v(" ，其中的 "),_("code",[v._v("Identifier")]),v._v(" 代表 “标识符” ，它和版本号之间使用 "),_("code",[v._v("-")]),v._v(" 短横线来连接，后面的 "),_("code",[v._v(".1")]),v._v(" 代表当前标识符的第几个版本，每发布一次，这个数字 +1 。")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("标识符")]),v._v(" "),_("th",[v._v("含义")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("alpha")]),v._v(" "),_("td",[v._v("内部版本，代表当前可能有很大的变动")])]),v._v(" "),_("tr",[_("td",[v._v("beta")]),v._v(" "),_("td",[v._v("测试版本，代表版本已开始稳定，但可能会有比较多的问题需要测试和修复")])]),v._v(" "),_("tr",[_("td",[v._v("rc")]),v._v(" "),_("td",[v._v("即将作为正式版本发布，只需做最后的验证即可发布正式版")])])])])])}),[],!1,null,null,null);_.default=r.exports}}]);